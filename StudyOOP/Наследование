Основная информация про наследование в Java.

Наследование - это механизм в программировании, в том числе и в Java, который позволяет описать новый класс
на основе уже существующего. Класс-наследник при этом получает доступ к полям и методам родительского класса.
Person - базовый класс. Employee - производный класс.

1) Если в базовом классе определены конструкторы, то в конструкторе производного класса необходимо вызвать один
из конструкторов базового класса с помощью ключевого слова super(...), вызов должен идти в самом начале в
производном классе.

2) Производный класс может определять свои методы, а может переопределять методы, которые унаследованы от
базового класса. Над переопределённым методом ставится аннотация @Override, с помощью super.printName() можно
вызвать метод базового класса, с помощью this.printName() вызывается метод производного класса.

3) Запрет наследования можно получить с помощью ключевого слова final. Теперь невозможно наследоваться от этого
класса, компилятор выдаст ошибку.
Пример:
public final class Person {
}

4) Запрет переопределения методов базового класса. В этом случае производный класс не может переопределить метод.
Пример:
public class Person {
    //........................
    public final void display(){
        System.out.println("Имя: " + name);
    }
}

5) Динамическая диспетчеризация методов. Можно передать переменной суперкласса ссылку на объект подкласса.
Пример:
Person sam = new Employee("Sam", "Oracle");
Так как Employee наследуется от Person, то объект Employee является в то же время и объектов Person. Однако,
виртуальная машина видит, что переменная Person в реальности указывает на объект Employee и при вызове методов
у этого объекта будет вызываться та версия методов, которая определена в классе Employee, а не в Person.
Строчка 8 в примере, в классе extendsExample/Source.

6) Порядок вызова конструкторов в многоуровневой иерархии осуществляется начиная с суперкласса и кончая подклассом.

