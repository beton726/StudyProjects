Основная информация об интерфейсах в Java.

Интерфейс - это совокупность методов и правил взаимодействия элементов системы. Другими словами,
интерфейс определяет как элементы будут взаимодействовать между собой.

1) interface — ключевое слово для создания интерфейса в Java.

2) Создать экземпляр интерфейса в Java нельзя.

3) Интерфейс обеспечивает абсолютную абстракцию. Абстрактные классы обеспечивают абстракцию,
но абстрактные классы могут иметь реализаций метода, а интерфейс не может.

4) Интерфейсы не могут иметь конструкторов, потому что мы не можем создать экземпляр интерфейса.
Также интерфейсы не могут иметь методы с реализацией.

5) По умолчанию любой атрибут интерфейса является public, static и final, так что нам не нужно определять модификаторы
доступа к атрибутам. Если же вы попробуете это сделать, то компилятор жаловаться не будет.

6) По умолчанию методы интерфейса неявно abstract и public. Это очень умное решение,
потому что в интерфейсе метод не имеет реализации — этим занимаются подклассы, реализующие этот интерфейс.

7) Интерфейс в Java не может быть подклассом у другого класса, но он может реализовать
другой интерфейс. public interface Shape extends Cloneable{} - пример интерфейса, который
наследует другой интерфейс. На самом деле Java обеспечивает множественное наследование интерфейсов — это означает,
что интерфейс может наследовать несколько интерфейсов.

8) Ключевое слово implements используется классами для реализации интерфейса.

9) Класс, реализующий интерфейс, должен обеспечить реализацию всех его методов, если только это не абстрактный класс.
Например, мы можем реализовать наш интерфейс в абстрактном классе.
Пример: как видно, здесь мы можем не реализовывать все методы интерфейса.
public abstract class ShapeAbs implements Shape {
    @Override
    public double getArea() {
        return 0;
    }
}

10) Интерфейсы могут иметь методы по умолчанию. Такая функциональность добавлена в JDK 8.
Пример: в классе не обязательно этот метод реализовывать, хотя можно его и переопределить.
interface Printable {
    default void print() {
        System.out.println("Undefined printable");
    }
}

11) Начиная с JDK 8 в интерфейсах доступны статические методы, они аналогичны методам класса.
Пример:
interface Printable {
    void print();
    static void read(){
        System.out.println("Read printable");
    }
}
Для обращения к нему необходимо:
public static void main(String[] args) {
    Printable.read();
}

12) Начиная с JDK 9 можно определять в интерфейсе методы с модификатором private.
Могут быть статическими и не статическими, но не могут иметь реализацию по умолчанию.
Подобные методы могут использоваться только внутри самого интерфейса.
Пример:
public class Program{
    public static void main(String[] args) {
        Calculatable c = new Calculation();
        System.out.println(c.sum(1, 2));
        System.out.println(c.sum(1, 2, 4));
    }
}
class Calculation implements Calculatable{
}
interface Calculatable{
    default int sum(int a, int b){
        return sumAll(a, b);
    }
    default int sum(int a, int b, int c){
        return sumAll(a, b, c);
    }
    private int sumAll(int... values){
         int result = 0;
         for(int n : values){
             result += n;
         }
         return result;
    }
}

13) Имеется множественная реализация интерфейсов.
Пример:
interface Printable {
    // методы интерфейса
}
interface Searchable {
    // методы интерфейса
}
class Book implements Printable, Searchable{
    // реализация класса
}

14) Имеется наследование интерфейсов.
Пример:
interface Printable {
    // методы интерфейса
}
interface Searchable {
    // методы интерфейса
}
interface BookPrintable extends Printable, Searchable{
    void paint();
}
