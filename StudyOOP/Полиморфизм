Основная информация про полиморфизм в Java.

Полиморфизм - это способность объекта принимать множество различных форм. Наиболее распространенное использование
полиморфизма в ООП происходит, когда ссылка на родительский класс используется для ссылки на объект дочернего класса.
Или по другому: это способность программы идентично использовать объекты с одинаковым интерфейсом без информации
о конкретном типе этого объекта.

Пример с наследованием:

Восходящее преобразование - ссылка на объект интерпретируется, как ссылка на базовый класс. Если смотреть по
примеру: тип класса Dancer имеет несколько форм(типов), объявленных справа BreakDankDancer, ElectricBoogieDancer.
Каждая из форм имеет общее уникальное поведение для общей функциональности, определённой в суперклассе -
метод dance(). То есть, метод объявленный в суперклассе, может быть по-разному реализован в наследниках.

Принцип полиморфизма в данном примере:
Это является вызов name.dance(); - вызов этого метода на типе Dancer. Программе не обязательно знать какого
именно типа будет объект BreakDankDancer или ElectricBoogieDancer, главное, что он - потомок класса Dancer.

Пример с интерфейсами:

Полиморфизм также проявляется в вызове методов name.swim(); - позволяет увидеть различия в поведении типов.
Почему так происходит?
Осуществляется позднее динамическое связывание. (Установление связи между вызовом метода и его конкретной
реализацией, в классах, все происходит на стадии выполнения программы). При компиляции программа еще не
знает из какого класса будет выполняться метод swim(), все осуществляется благодаря механизму динамической
диспетчеризации - проверки типа объекта во время выполнения программы и выбора нужной реализации метода
для этого типа.

Хорошей практикой явлется использование абстрактных описаний для определения базовых классов с помощью
абстрактных классов, а также интерфейсов. Абстрация - выделение общего поведения и свойств и заключённых
их в рамки абстрактного класса. Интерфейс - выделение общего поведения.